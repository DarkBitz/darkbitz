---
# We need sudo for some of the Docker commands.
sudo: required

env:
  # Provide a list of OSes we want to use for testing.
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
#  - distro: fedora24
#    init: /usr/lib/systemd/systemd
#    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
#  - distro: ubuntu1604
#    init: /lib/systemd/systemd
#    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
#  - distro: ubuntu1404
#    init: /sbin/init
#    run_opts: ""
#  - distro: debian8
#    init: /lib/systemd/systemd
#    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"

# Tell Travis to start Docker when it brings up an environment.
services:
  - docker

before_install:
  # Pull container
  #- 'sudo docker pull ${distribution}:${version}'
  - 'sudo docker pull geerlingguy/docker-centos7-ansible:latest'
  # Customize container
  #- 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'
  # Pull the image from Docker Hub for the OS under test.
  # Pull container from Docker Hub.
  #- 'docker pull geerlingguy/docker-${distro}-ansible:latest'

script:
  # Start the container from the image and perform tests.
  # Create a random file to store the container ID.
  - container_id=$(mktemp)

  # Run container detached, with our role mounted inside.
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/darkbitz:ro ${run_opts} geerlingguy/docker-${distro}-ansible:latest "${init}" > "${container_id}"'
  # Run container in detached state
  #- 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/darkbitz:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'


  # Check the role/playbook's syntax.
  #- >
  #  docker exec --tty "$(cat ${container_id})" env TERM=xterm
  #  ansible-playbook /etc/ansible/roles/darkbitz/tests/test.yml
  #  --syntax-check
  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/darkbitz/tests/test.yml --syntax-check'



  # Run the role/playbook with ansible-playbook.
  #- >
  #  docker exec --tty "$(cat ${container_id})" env TERM=xterm
  #  ansible-playbook /etc/ansible/roles/darkbitz/tests/test.yml
  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/darkbitz/tests/test.yml'


  # Run the role/playbook again, checking to make sure it's idempotent.
  #- idempotence=$(mktemp)
  #- >
  #  docker exec "$(cat ${container_id})"
  #  ansible-playbook /etc/ansible/roles/darkbitz/tests/test.yml
  #  | tee -a ${idempotence}
  #- >
  #  tail ${idempotence}
  #  | grep -q 'changed=0.*failed=0'
  #  && (echo 'Idempotence test: pass' && exit 0)
  #  || (echo 'Idempotence test: fail' && exit 1)
  #
  #  # Ensure Wget is installed.
  #  - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm which wget'

  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  # Notify Ansible Galaxy when a role builds successfully.
